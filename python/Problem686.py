def int_to_binary_array(a):
    return bin(a)[2:]

def pow_mod_n(base, power, n, value=1):
    return pow_mod_n_inner(base, int_to_binary_array(power), n, value)

def pow_mod_n_inner(base, bits_arr, n, value):
    if len(bits_arr) == 0:
        return value % n 
    
    # because python magic we do not have to apply the rule  (a*b) % N  =>  (a%N * b%N) % N
    value = (value ** 2) * (base ** int(bits_arr[0])) % n 
    return pow_mod_n_inner(base, bits_arr[1:], n, value)

def p(L, n):
    power = 1
    while (n > 0):
        power += 1
        v = 2 ** power
        if (int(str(v)[0:3]) == L):
            print(power)
            n -= 1 

    return power


print("\n\n", p(123, 45))

data = [90,379,575,864,1060,1545,1741,2030,2226,2515,2711,3000,3196,3681,3877,4166,4362,4651,4847,5136,5332,5817,6013,6302,6498,6787,6983,7272,7468,7953,8438,8634,8923,9119,9408,9604,10089,10574,10770,11059,11255,11544,11740,12225,12710,12906,13195,13391,13680,13876,14361,14846,15042,15331,15527,15816,16012,16301,16497,16982,17178,17467,17663,17952,18148,18437,18633,19118,19314,19603,19799,20088,20284,20573,20769,21254,21450,21739,21935,22224,22420,22709,22905,23390,23875,24071,24360,24556,24845,25041,25526,26011,26207,26496,26692,26981,27177,27662,28147,28343,28632,28828,29117,29313,29602,29798,30283,30479,30768,30964,31253,31449,31738,31934,32419,32615,32904,33100,33389,33585,33874,34070,34555,34751,35040,35236,35525,35721,36010,36206,36691,37176,37372,37661,37857,38146,38342]

import matplotlib.pyplot as plt
plt.plot(data)
plt.show()